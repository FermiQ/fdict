#:include 'fdict_common.fypp'

! @LICENSE@, see README.md

! Generic purpose variable as in any scripting language
! It has the power to transform into any variable at any time
module variable
  !! A type-free variable module to contain _any_ data in fortran.
  !!
  !! This module implements a generic variable-type (`type(variable_t)`)
  !! which may contain _any_ data-type (even user-derived type constructs).
  !!
  !! Its basic usage is somewhat different than the regular assignment
  !! in fortran.
  !!
  !! Example:
  !!
  !!```fortran
  !! real :: r
  !! real :: ra(10)
  !! real, target :: rb(10)
  !! type(variable_t) :: v
  !! call assign(v, r) ! v now contains value of r
  !! call assign(v, ra) ! v now contains array with values of ra
  !! call delete(v) ! delete content
  !! call associate(v, ra) ! v now contains a pointer to rb
  !! call assign(ra, v) ! copies data from rb to ra
  !!```
  !!
  !! The assignment routine behaves like `=` (delete old value)
  !! whereas the associate routine behaves like `=>` (nullify old value).
  !!
  !! The data-types allowed in this type is *not* limited by this
  !! module, but we currently allow integers, reals, complex and C-pointers.

  use fdict_types

  implicit none

  private

  ! To create a constant transfer data-type of the pointer methods
  character(len=1), dimension(1) :: VARIABLE_ENC_TYPE

  ! Internal variable to hold the size of the "type" switch
  !> Maximum character length of the type specifier in the variable, no
  !! unique identifier may be longer than this.
#! We need to figure out the maximum length, so it automatically determines
#! the correct size.
#:set length = 4
#:for sh, _, _, _, maxr in ALL_SHORTS_KINDS_TYPES_RANKS
  #:set length = max(length, len(typename(sh, maxr)))
#:endfor
  integer, parameter, public :: VARIABLE_TYPE_LENGTH = ${length}$
#:del length

  type :: variable_t
    !! Container for _any_ fortran data-type, intrinsically handles all
    !! from fortran and any external type may be added via external routines.
    !!
    !! The container is based on a type-transfer method by storing a pointer
    !! to the data and transfer the type to a character array via encoding.
    !! This enables one to retrieve the pointer position later and thus enables
    !! pointer assignments and easy copying of data.

    character(len=VARIABLE_TYPE_LENGTH) :: t = ' '
    ! The encoding placement of all data
    character(len=1), dimension(:), allocatable :: enc
  end type variable_t
  public :: variable_t

  interface which
    !! Type of content stored in the variable (`character(len=VARIABLE_TYPE_LENGTH)`)
    module procedure which_var
    module procedure which_aS_0
 #:for sh, k, t, minr, maxr in ALL_SHORTS_KINDS_TYPES_RANKS
  #:for ir in range(minr, maxr + 1)
    module procedure ${"which_{}{}".format(sh, ir)}$
  #:endfor
 #:endfor
  end interface which
  public :: which
  interface delete
    !! Delete the variable (equivalent to `deallocate(<>)`).
    module procedure delete_
  end interface delete
  public :: delete
  interface nullify
    !! Nullify the variable (equivalent to `nullify(<>)`).
    module procedure nullify_
  end interface nullify
  public :: nullify

  interface empty
    !! check if empty (equivalent to `nullify(<>)`).
    module procedure empty_
  end interface empty
  public :: empty

  interface print
    !! Print (to std-out) information regarding the variable, i.e. the type.
    module procedure print_
  end interface print
  public :: print

  ! Specific routines for passing types to variables
  interface associate_type
    module procedure associate_type_
  end interface associate_type
  public :: associate_type

  interface enc
    !! The encoding of the stored pointer (`character, dimension(:)`)
    !!
    !! This is mainly intenteded for internal use to transfer between real
    !! data and the data containers.
    !!
    !! It is however required to enable external type storage routines.
    module procedure enc_
  end interface enc
  public :: enc
  interface size_enc
    !! The size of the encoding character array (`size(enc(<>))`)
    !!
    !! This is mainly intenteded for internal use to transfer between real
    !! data and the data containers.
    module procedure size_enc_
  end interface size_enc
  public :: size_enc


  ! Specific routine for packing a character(len=*) to
  ! character(len=1) (:)
  interface cpack
    !! Convert a `character(len=*)` to `character, dimension(:)`
    !!
    !! A routine requirement for creating pointers to character storages.
    !! One can convert from `len=*` to an array of `len=1` and back using [[cunpack]].
    !!
    !! Because fortran requires dimensions of arrays assignments to be same size it
    !! one has to specify ranges if the length of the character is not equivalent
    !! to the size of the array.
    !!
    !! Example:
    !!
    !!```fortran
    !! character(len=20) :: a
    !! character :: b(10)
    !! a = 'Hello'
    !! b(1:5) = cpack('Hello')
    !!```
    !!
    !! @note
    !! This is a requirement because it is not possible to create a unified pointer
    !! to arbitrary length characters. Hence we store all `len=*` variables as `len=1` character arrays.
    module procedure cpack_
  end interface cpack
  public :: cpack

  ! Specific routine for packing a character(len=*) to
  ! character(len=1) (:)
  interface cunpack
    !! Convert a `character(len=1), dimensions(:)` to `character(len=*)`
    !!
    !! Pack an array into a character of arbitrary length.
    !! This convenience function helps converting between arrays of characters
    !! and fixed length characters.
    !!
    !! As character assignment is not restricted similarly as array assignments
    !! it is not a requirement to specify ranges when using this function.
    module procedure cunpack_
  end interface cunpack
  public :: cunpack

  interface assign
 #:for sh, k, t, minr, maxr in ALL_SHORTS_KINDS_TYPES_RANKS
  #:for ir in range(minr, maxr + 1)
   module procedure ${"assign_get_{}{}".format(sh, ir)}$
   module procedure ${"assign_set_{}{}".format(sh, ir)}$
  #:endfor
 #:endfor

   #! additional manually defined routines
   module procedure assign_var
   module procedure assign_set_aS_0
   module procedure assign_get_aS_0
  end interface
  public :: assign

  interface associate
 #:for sh, k, t, minr, maxr in ALL_SHORTS_KINDS_TYPES_RANKS
  #:for ir in range(minr, maxr + 1)
   module procedure ${"associate_get_{}{}".format(sh, ir)}$
   module procedure ${"associate_set_{}{}".format(sh, ir)}$
  #:endfor
 #:endfor
   module procedure associate_var
  end interface
  public :: associate

  interface associatd
 #:for sh, k, t, minr, maxr in ALL_SHORTS_KINDS_TYPES_RANKS
  #:for ir in range(minr, maxr + 1)
   module procedure ${"associatd_l_{}{}".format(sh, ir)}$
   module procedure ${"associatd_r_{}{}".format(sh, ir)}$
  #:endfor
 #:endfor
  end interface
  public :: associatd

contains

  subroutine print_(this)
    type(variable_t), intent(in) :: this
    write(*,'(t2,a)') this%t
  end subroutine

  pure function which_var(this) result(t)
    type(variable_t), intent(in) :: this
    character(len=VARIABLE_TYPE_LENGTH) :: t
    t = this%t
  end function

  subroutine delete_(this,dealloc, success)
    type(variable_t), intent(inout) :: this
    logical, intent(in), optional :: dealloc
    logical, intent(out), optional :: success
    logical :: ldealloc, lsuccess
#:for sh, k, t, minr, maxr in ALL_SHORTS_KINDS_TYPES_RANKS
#:for ir in range(minr, maxr + 1)
 $:ptr_declare_define(t, sh, ir, 1)
#:endfor
#:endfor

    ldealloc = .true.
    if ( present(dealloc) ) ldealloc = dealloc
    lsuccess = .true.
    if ( ldealloc ) then
      select case ( this%t )
#:for sh, k, t, minr, maxr in ALL_SHORTS_KINDS_TYPES_RANKS
#:for ir in range(minr, maxr)
      case ( "${typename(sh, ir)}$" )
        ${ptr_name(sh, ir)}$ = transfer(this%enc, ${ptr_name(sh, ir)}$)
        deallocate(${ptr_name(sh, ir)}$%p)
#:endfor
#:endfor
      case default
        lsuccess = .false.
      end select
    end if
    call nullify(this)
    if ( present(success) ) success = lsuccess
  end subroutine

  elemental subroutine nullify_(this)
    type(variable_t), intent(inout) :: this
    this%t = '  '
    if ( allocated(this%enc) ) deallocate(this%enc)
  end subroutine

  elemental function empty_(this)
    type(variable_t), intent(in) :: this
    logical :: empty_
    empty_ = .not. allocated(this%enc)
  end function

  ! Returns the bare encoding of this variable
  ! This can ease the process of assigning
  ! user-types to a variable.
  ! An encoding might be 2, or 10000000 bytes big.
  ! Therefore we use a subroutine to determine
  ! the size of the returning encoding characters.
  ! If the size of the returning enc is not
  ! big enough it will be reset to ' '
  subroutine enc_(this,enc)
    type(variable_t), intent(in) :: this
    character(len=1), intent(out) :: enc(:)
    integer :: i
    if ( this%t == '  ' ) then
      enc = ' '
    else
      ! We do have an encoding
      i = size(this%enc)
      if ( i > size(enc) ) then
        enc = ' '
      else
        enc(1:i) = this%enc
      end if
    end if
  end subroutine

  function size_enc_(this) result(len)
    type(variable_t), intent(in) :: this
    integer :: len
    if ( this%t == '  ' ) then
      len = 0
    else
      len = size(this%enc)
    end if

  end function

  ! We allow the user to pass an encoding field.
  ! As this is the same as passing a char
  ! we MUST use a specific routine for this.
  ! One _could_, in principle, add an optional
  ! logical flag for the assign_set_a_, however
  ! one cannot assign a type by passing a reference
  ! and hence we ONLY allow associate_type
  ! This also means that any de-allocation of variables
  ! containing an external type will only de-reference it.
  ! A bit counter-intuitive, yet the variable type needs
  ! all information about the type to successfully de-allocate it.
  ! It is ALSO very important that the user
  ! passed the full-encoding WITHOUT padding of ' '.
  ! We cannot know for sure whether the encoding actually terminates
  ! in a bit corresponding to char(' ')!
  subroutine associate_type_(this,enc,dealloc,which)
    type(variable_t), intent(inout) :: this
    character(len=1), intent(in) :: enc(:)
    logical, intent(in), optional :: dealloc
    character(len=*), intent(in), optional :: which
    logical :: ldealloc
    ldealloc = .false.
    if(present(dealloc))ldealloc = dealloc
    if (.not. ldealloc) then
      ! if we do not deallocate, nullify
      call nullify(this)
    else
      call delete(this)
    end if
    if ( present(which) ) then
      this%t = trim(which)
    else
      this%t = "USER"
    end if
    allocate(this%enc(size(enc)))
    this%enc(:) = enc(:)

  end subroutine

  pure function cpack_(c) result(car)
    character(len=*), intent(in) :: c
    character(len=1) :: car(len(c))
    integer :: i

    do i = 1 , len(c)
      car(i) = c(i:i)
    end do

  end function
  pure function cunpack_(car) result(c)
    character(len=1), intent(in) :: car(:)
    character(len=size(car)) :: c
    integer :: i

    do i = 1 , size(car)
      c(i:i) = car(i)
    end do

  end function

  subroutine assignment_(this,rhs)
    type(variable_t), intent(inout) :: this
    type(variable_t), intent(in) :: rhs
    call assign(this,rhs)
  end subroutine

  subroutine assign_var(this,rhs,dealloc,success)
    type(variable_t), intent(inout) :: this
    type(variable_t), intent(in) :: rhs
    logical, intent(in), optional :: dealloc
    logical, intent(out), optional :: success
    logical :: ldealloc, lsuccess
    integer :: i
#:for sh, k, t, minr, maxr in ALL_SHORTS_KINDS_TYPES_RANKS
#:for ir in range(minr, maxr + 1)
 $:ptr_declare_define(t, sh, ir, 2)
#:endfor
#:endfor

    ! collect deallocation option (default as =)
    ! ASSIGNMENT in fortran is per default destructive
    ldealloc = .true.
    lsuccess = .true.
    if(present(dealloc))ldealloc = dealloc
    if (.not. ldealloc) then
      ! if we do not deallocate, nullify
      call nullify(this)
    else
      call delete(this)
    end if
    this%t = rhs%t

    select case ( this%t )
#:for sh, k, t, minr, maxr in ALL_SHORTS_KINDS_TYPES_RANKS
 #:for ir in range(minr, maxr + 1)
    case ( '${typename(sh, ir)}$' )
      #: set p1 = "{}_1".format(ptr_name(sh, ir))
      #: set p2 = "{}_2".format(ptr_name(sh, ir))
      ${p2}$ = transfer(rhs%enc, ${p2}$)
      nullify(${p1}$%p)
      $:alloc_reference("{}%p".format(p1), "{}%p".format(p2), ir)
      ${p1}$%p = ${p2}$%p
      allocate(this%enc(size(transfer(${p1}$, VARIABLE_ENC_TYPE))))
      this%enc(:) = transfer(${p1}$, VARIABLE_ENC_TYPE)
      nullify(${p1}$%p)
 #:endfor
#:endfor

    case default
      lsuccess = .false.
    end select

    if ( present(success) ) success = lsuccess

  end subroutine

  subroutine associate_var(this,rhs,dealloc,success)
    type(variable_t), intent(inout) :: this
    type(variable_t), intent(in) :: rhs
    logical, intent(in), optional :: dealloc
    logical, intent(out), optional :: success
    logical :: ldealloc
    ! collect deallocation option (default as =)
    ! ASSOCIATION in fortran is per default non-destructive
    ldealloc = .false.
    if ( present(success) ) success  = .true.
    if ( present(dealloc) ) ldealloc = dealloc
    if (.not. ldealloc) then
      ! if we do not deallocate, nullify
      call nullify(this)
    else
      call delete(this)
    end if

    ! Association is done by copying the encoding
    this%t = rhs%t
    allocate(this%enc(size(rhs%enc)))
    this%enc(:) = rhs%enc(:)

  end subroutine

  pure function associatd_var(this,rhs) result(ret)
    type(variable_t), intent(in) :: this
    type(variable_t), intent(in) :: rhs
    logical :: ret
#:for sh, k, t, minr, maxr in ALL_SHORTS_KINDS_TYPES_RANKS
#:for ir in range(minr, maxr + 1)
 $:ptr_declare_define(t, sh, ir, 2)
#:endfor
#:endfor

    ret = this%t==rhs%t
    if ( .not. ret ) return

    select case ( this%t )
#:for sh, k, t, minr, maxr in ALL_SHORTS_KINDS_TYPES_RANKS
 #:for ir in range(minr, maxr + 1)
  #:set p1 = "{}_1".format(ptr_name(sh, ir))
  #:set p2 = "{}_2".format(ptr_name(sh, ir))
    case ( '${typename(sh, ir)}$' )
      ${p1}$ = transfer(this%enc, ${p1}$)
      ${p2}$ = transfer(rhs%enc, ${p2}$)
      ret = associated(${p1}$%p, ${p2}$%p)
      nullify(${p1}$%p, ${p2}$%p)
 #:endfor
#:endfor

    case default
       ret = len(this%enc) == len(rhs%enc)
       if ( ret ) ret = all(this%enc == rhs%enc)
    end select

  end function

  pure function which_aS_0(this) result(t)
    character(len=*), intent(in) :: this
    character(len=VARIABLE_TYPE_LENGTH) :: t
    t = "${typename('a1_1', 1)}$"
  end function

  ! The character(len=*) is a bit difficult because
  ! there is no way to generate a specific type for _all_
  !   len=1,2,3,...
  ! variables.
  ! Instead we convert the character to char(len=1)
  ! and store a pointer to this.
  ! This ensures that it can be retrieved (via associate)
  ! and mangled through another variable type
  subroutine assign_set_aS_0(this,rhs,dealloc)
    type(variable_t), intent(inout) :: this
    character(len=*), intent(in) :: rhs
    logical, intent(in), optional :: dealloc
    character(len=1), pointer :: c(:)
    integer :: i
    logical :: ldealloc
    #! Assignment in fortran is per default destructive
    ldealloc = .true.
    if(present(dealloc)) ldealloc = dealloc
    if(ldealloc) then
      call delete(this)
    else
      call nullify(this)
    end if
    nullify(c)
    allocate(c(len(rhs)))
    do i = 1 , size(c)
      c(i) = rhs(i:i)
    end do
    ! This is still a "copy"
    call associate(this, c)
    nullify(c)
  end subroutine
  subroutine assign_get_aS_0(lhs,this,success)
    character(len=*), intent(out) :: lhs
    type(variable_t), intent(inout) :: this
    logical, intent(out), optional :: success
    character(len=1), pointer :: c(:)
    logical :: lsuccess
    integer :: i
    call associate(c, this, success=lsuccess)
    if ( lsuccess ) lsuccess = len(lhs) >= size(c)
    if ( present(success) ) success = lsuccess
    if ( .not. lsuccess ) return
    do i = 1 , size(c)
      lhs(i:i) = c(i)
    end do
    ! set everything else to ''
    if ( size(c) < len(lhs) ) then
      lhs(size(c)+1:) = ' '
    end if
  end subroutine


#:for sh, k, t, minr, maxr in ALL_SHORTS_KINDS_TYPES_RANKS
 #:for ir in range(minr, maxr + 1)

pure function ${"which_{}{}".format(sh, ir)}$(this) result(t)
  ${t}$, intent(in) :: this${ranksuffix(ir)}$
  character(len=VARIABLE_TYPE_LENGTH) :: t
  t = "${typename(sh, ir)}$"
end function

subroutine ${"assign_set_{}{}".format(sh, ir)}$(this, rhs, dealloc)
  type(variable_t), intent(inout) :: this
  ${t}$, intent(in) :: rhs${ranksuffix(ir)}$
  logical, intent(in), optional :: dealloc
  logical :: ldealloc
  type :: pt
    ${t}$, pointer :: p${ranksuffix(ir)}$
  end type
  type(pt) :: p

  #! Assignment in fortran is per default destructive
  ldealloc = .true.
  if ( present(dealloc) ) ldealloc = dealloc
  if ( ldealloc ) then
     call delete(this)
  else
     call nullify(this)
  end if
  ! with pointer transfer we need to deallocate else bounds might change
  this%t = "${typename(sh, ir)}$"
  nullify(p%p)
  ${alloc_reference("p%p", "rhs", ir)}$
  p%p = rhs
  allocate(this%enc(size(transfer(p, VARIABLE_ENC_TYPE))))
  this%enc(:) = transfer(p, VARIABLE_ENC_TYPE)
  nullify(p%p)
end subroutine

subroutine ${"assign_get_{}{}".format(sh, ir)}$(lhs, this, success)
  ${t}$, intent(out) :: lhs${ranksuffix(ir)}$
  type(variable_t), intent(in) :: this
  logical, intent(out), optional :: success
  logical :: lsuccess
  type :: pt
    ${t}$, pointer :: p${ranksuffix(ir)}$
  end type
  type(pt) :: p
  lsuccess = this%t == "${typename(sh, ir)}$"
#:if ir > 0
  if (lsuccess) then
    p = transfer(this%enc,p) ! retrieve pointer encoding
    lsuccess = all(shape(p%p)==shape(lhs))
    #! .and. all((lbound(p%p) == lbound(lhs))) &
    #! .and. all((ubound(p%p) == ubound(lhs)))
  end if
#:endif
  if (present(success)) success = lsuccess
  if (.not. lsuccess) return
#:if ir == 0
  p = transfer(this%enc,p) ! retrieve pointer encoding
#:endif
  lhs = p%p
end subroutine

subroutine ${"associate_get_{}{}".format(sh, ir)}$(lhs,this,dealloc,success)
  ${t}$, pointer :: lhs${ranksuffix(ir)}$
  type(variable_t), intent(in) :: this
  logical, intent(in), optional :: dealloc
  logical, intent(out), optional :: success
  logical :: ldealloc, lsuccess
  type :: pt
    ${t}$, pointer :: p${ranksuffix(ir)}$
  end type
  type(pt) :: p
  lsuccess = this%t == "${typename(sh, ir)}$"
  if (present(success)) success = lsuccess
  #! ASSOCIATION in fortran is per default non-destructive
  ldealloc = .false.
  if(present(dealloc))ldealloc = dealloc
  #! this will assume that lhs is nullified in case dealloc = .true.
  if ( ldealloc ) then
    if (associated(lhs)) then
      deallocate(lhs)
      nullify(lhs)
    end if
  end if
  if (.not. lsuccess ) return
  p = transfer(this%enc,p) ! retrieve pointer encoding
  lhs => p%p
end subroutine

subroutine ${"associate_set_{}{}".format(sh, ir)}$(this,rhs,dealloc)
  type(variable_t), intent(inout) :: this
  #! Setting the intent(inout) ensures that no constants
  #! will be able to be passed.
  #! However, the dictionary type does not allow
  #! this due to OPERATORS, hence we keep it as this
  #! and proclaim that any user creating a pointer
  #! to a constant is insane...
  ${t}$, intent(in), target :: rhs${ranksuffix(ir)}$
  logical, intent(in), optional :: dealloc
  logical :: ldealloc
  type :: pt
    ${t}$, pointer :: p${ranksuffix(ir)}$
  end type
  type(pt) :: p
  #! ASSOCIATION in fortran is per default non-destructive
  ldealloc = .false.
  if(present(dealloc))ldealloc = dealloc
  if (ldealloc) then
    call delete(this)
  else
    call nullify(this)
  end if
  this%t = "${typename(sh, ir)}$"
  p%p => rhs
  allocate(this%enc(size(transfer(p, VARIABLE_ENC_TYPE))))
  this%enc(:) = transfer(p, VARIABLE_ENC_TYPE)
end subroutine

pure function ${"associatd_l_{}{}".format(sh, ir)}$(lhs,this) result(ret)
  ${t}$, pointer :: lhs${ranksuffix(ir)}$
  type(variable_t), intent(in) :: this
  logical :: ret
  type :: pt
    ${t}$, pointer :: p${ranksuffix(ir)}$
  end type
  type(pt) :: p
  ret = this%t == "${typename(sh, ir)}$"
  if (ret) then
    nullify(p%p)
    p = transfer(this%enc,p)
    ret = associated(lhs,p%p)
  endif
end function
pure function ${"associatd_r_{}{}".format(sh, ir)}$(this,rhs) result(ret)
  type(variable_t), intent(in) :: this
  ${t}$, pointer :: rhs${ranksuffix(ir)}$
  logical :: ret
  type :: pt
    ${t}$, pointer :: p${ranksuffix(ir)}$
  end type
  type(pt) :: p
  ret = this%t == "${typename(sh, ir)}$"
  if (ret) then
    nullify(p%p)
    p = transfer(this%enc,p)
    ret = associated(rhs,p%p)
  endif
end function

 #:endfor
#:endfor

end module variable
